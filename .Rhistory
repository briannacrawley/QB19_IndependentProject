JukesCantorQ <- function(a){
# Forms the rate matrix for a Jukes - Cantor model
#
# Args:
#   a: The rate of any nucleotide substitution
#
# Returns:
#   The rate matrix Q for the Jukes - Cantor model
Q <- matrix(c( -3 * a, a, a, a,
a, -3 * a, a, a,
a, a, -3 * a, a,
a, a, a, -3*a),
nrow = 4,
byrow = T)
return(Q)
}
Kimura2Q <- function(b, g){
# Forms the rate matrix for a two-parameter Kimura model
#
# Args:
#   b: the rate of a transition
#   g: the rate of a transversion
#
# Returns:
#   The rate matrix Q for the Jukes - Cantor model
Q <- matrix(c( -b-2*g, b, g, g,
b, -b-2*g, g, g,
g, g, -b-2*g, b,
g, g, b, -b-2*g),
nrow = 4,
byrow = T)
return(Q)
}
Q <- JukesCantorQ(a = .1)
Q
require(expm)
expm(Q * 1)
expm(Q * 2)
expm(Q * 100)
Q <- Kimura2Q(b = .1, g = 0.05)
Q
expm(Q * 1)
expm(Q * 10)
expm(Q * 100)
source('~/Dropbox/Rscripts/ELME/SM/sis.r')
source('~/Dropbox/Rscripts/ELME/SM/sis.r')
debug(SISSimulation)
SISSimulation()
function(b = 2, g = 1, N = 100, I0 = 10, maxt = 20, seed = NULL, ...){
# Simulate and plot a realization of a stochastic SIS model using the so-called Gillespie algorithm
#
# Args:
#   [b]eta: the force of infection
#   [g]: the recovery rate of infectious individuals
#   [N]: the population size
#   I0: the initial size of the infectious population
#   seed: the random number seed
#   ...: optional plot arguments
#
# Returns:
#   a plot of I(t) vs t from time = 0 to time = maxt
# set up axes
plot(c(0, maxt), c(0, N), type = "n", xlab = "t", ylab = "")
# i is the number of infectious individuals
i <- I0
# counter to keep track of time
time <- 0
# keep going as long as we have not reached the maximum time, and the infection has not died out
while (time < maxt & i > 0) {
rate1 <- (b / N) * (N - i) * i # I -> I + 1
rate2 <- g * i # I -> I - 1
sojourn <- rexp(1, rate1 + rate2)
segments(time, i, time + sojourn, i, col = "red")
change <- sample(c(1, -1), 1, prob = c(rate1, rate2))
segments(time + sojourn, i, time + sojourn, i + change, lwd = 0.5, col = "red")
# update i and time
i <- i + change
time <- time + sojourn
}
}
SISSimulation <- function(b = 2, g = 1, N = 100, I0 = 10, maxt = 20, seed = NULL, ...){
# Simulate and plot a realization of a stochastic SIS model using the so-called Gillespie algorithm
#
# Args:
#   [b]eta: the force of infection
#   [g]: the recovery rate of infectious individuals
#   [N]: the population size
#   I0: the initial size of the infectious population
#   seed: the random number seed
#   ...: optional plot arguments
#
# Returns:
#   a plot of I(t) vs t from time = 0 to time = maxt
# set up axes
plot(c(0, maxt), c(0, N), type = "n", xlab = "t", ylab = "")
# i is the number of infectious individuals
i <- I0
# counter to keep track of time
time <- 0
# keep going as long as we have not reached the maximum time, and the infection has not died out
while (time < maxt & i > 0) {
rate1 <- (b / N) * (N - i) * i # I -> I + 1
rate2 <- g * i # I -> I - 1
sojourn <- rexp(1, rate1 + rate2)
segments(time, i, time + sojourn, i, col = "red")
change <- sample(c(1, -1), 1, prob = c(rate1, rate2))
segments(time + sojourn, i, time + sojourn, i + change, lwd = 0.5, col = "red")
# update i and time
i <- i + change
time <- time + sojourn
}
}
SISLimitDistribution <- function(b = 2, g = 1, N = 100, ...){
# Calculate the quasi-stationary distribution for a SIS model with a closed population
#
# Args:
#   [b]eta: the force of infection
#   [g]: the recovery rate of infectious individuals
#   [N]: the population size
#   ...: optional plot arguments
#
# Returns:
#   the quasi-stationary distribution of the number of infectives
# start with a diagonal matrix, with exit rates on the diagonal
diagonal <- -1 * ((b/N) * (N-(0:N)) * (0:N) + g * (0:N)) # these are the exit rates
Q <- diag(diagonal) # now form the matrix
# add the off-diagonal matrix elements
for (i in 1:N){
Q[i+1,i] <- g * i
Q[i,i+1] <- (b / N) * (N - (i - 1)) * (i - 1)
}
# check to make sure row sums of Q = 0
if (max(abs(apply(Q, 1, sum)))> 1e-6) {
stop("Something is wrong here; row sums of Q != 0")
}
# remove first row & col
Q <- Q[-1, -1]
ttt <- eigen(t(Q))
# find the index of the eigenvalue == 0
my.index <- which(Re(ttt$values) == max(Re(ttt$values)))
# pull out the corresponding eigenvector
quasi <- Re(ttt$vectors[, my.index])
# re-scale so that the elements sum to 1
quasi <- quasi / sum(quasi)
# make a plot
barplot(quasi, names = 1:N)
expected.i <- sum((1:N) * quasi)
variance.i <- sum((((1:N) - expected.i) ^ 2) * quasi)
return(list(quasi = quasi, mean = expected.i, var = variance.i))
}
library(rjags)
install.packages("rjags")
install.packages("coda")
install.packages("runjags")
install.packages("MCMpack")
library(rjags)
library(coda)
library(runjags)
library(MASS)
library(MCMCpack)
# Chunk 1
rm(list = ls())
getwd()
setwd("~/GitHub/QB19_IndependentProject/")
require("vegan")
require("dplyr")
crawley.full <- read.csv("Crawley.csv")
View(crawley.full)    # This is a nifty thing that dplyr does
# Chunk 2
crawley.full %>%
group_by(Nativity.Code) %>%
summarize(grpcount = n())
# Those 8 empty ones are just empty rows at the bottom of the df. Let's get rid of those
crawley.full <- crawley.full[-c(293:300), ]
# Chunk 3
# How many sites have an invasive species present?
# get rid of last 2 weird columns, & transpose
# This df still has the nativity code, but it's a row now instead of a column
crawley.sbys <- t(crawley.full[, 1:(length(crawley.full) - 2)])
crawley.sbys %>%
mutate(Nativity.new = ifelse(Nativity.Code == "0" | Nativity.Code == "1", "0", "1"))
class(crawley.sbys)
class(crawley.full)
crawley.full %>%
mutate(Nativity.new = ifelse(Nativity.Code == "0" | Nativity.Code == "1", "0", "1"))
crawley.full %<>%
mutate(Nativity.new = ifelse(Nativity.Code == "0" | Nativity.Code == "1", "0", "1"))
require("magrittr")
crawley.full %<>%     # This double pipe saves all the stuff I did back into the original df
mutate(Nativity.new = ifelse(Nativity.Code == "0" | Nativity.Code == "1", "0", "1"))
# Chunk 1
rm(list = ls())
getwd()
setwd("~/GitHub/QB19_IndependentProject/")
require("vegan")
require("dplyr")
require("magrittr")
crawley.full <- read.csv("Crawley.csv")
View(crawley.full)    # This is a nifty thing that dplyr does
crawley.sbys <- t(crawley.full[, 1:(length(crawley.full) - 2)])
crawley.sbys
View(crawley.sbys)
S.obs <- function(x = "") {
rowSums(x > 0) * 1
}
crawley.full
crawley.full %<>%     # This double pipe saves all the stuff I did back into the original df
mutate(Nativity.new = ifelse(Nativity.Code == "0" | Nativity.Code == "1", "0", "1"))
crawley.nat <- crawley.full[crawley.full$Nativity.new == "0", ]
crawley.nat
crawley.inv <- crawley.full[crawley.full$Nativity.new == "1", ]
crawley.nat.sbys <- t(crawley.nat[, 1:(length(crawley.nat) - 2)])
crawley.nat.sbys
View(crawley.nat.sbys)
colnames(crawley.full)
colnames(crawley.jat)
colnames(crawley.nat)
crawley.inv.sbys <- t(crawley.inv[, 1:(length(crawley.inv) - 2)])
S.obs(crawley.nat.sbys)
S.obs(crawley.inv.sbys)
crawley.inv.sbys
crawley.inv.sbys <- t(crawley.inv[, 1:(length(crawley.inv) - 2)])
S.obs(crawley.inv.sbys)
View(crawley.inv.sbys)
mean(S.obs(crawley.nat.sbys))
S.obs(crawley.nat.sbys)
mean(S.obs(crawley.nat.sbys), na.rm = T)
S.obs(crawley.nat.sbys[-c(1:3), ])
richness.nat <- S.obs(crawley.nat.sbys[-c(1:3), ])   # Remove first three rows because they're not sites
mean(richness.nat, na.rm = T)
crawley.full %>%     # This double pipe saves all the stuff I did back into the original df
mutate(Nativity.new = ifelse(Nativity.Code == "0" | Nativity.Code == "1", "0", "1")) %>%
select_if(Nativity.Code == "UNK")
crawley.full %>%     # This double pipe saves all the stuff I did back into the original df
mutate(Nativity.new = ifelse(Nativity.Code == "0" | Nativity.Code == "1", "0", "1")) %>%
select_if(Nativity.new == "UNK")
crawley.full
crawley.full %>%     # This double pipe saves all the stuff I did back into the original df
mutate(Nativity.new = ifelse(Nativity.Code == "0" | Nativity.Code == "1", "0", "1")) %>%
filter(Nativity.Code != "UNK")
crawley.full %<>%     # This double pipe saves all the stuff I did back into the original df
mutate(Nativity.new = ifelse(Nativity.Code == "0" | Nativity.Code == "1", "0", "1")) %>%
filter(Nativity.Code != "UNK")
crawley.nat <- crawley.full[crawley.full$Nativity.new == "0", ]
crawley.inv <- crawley.full[crawley.full$Nativity.new == "1", ]
crawley.nat.sbys <- t(crawley.nat[, 1:(length(crawley.nat) - 2)])
crawley.inv.sbys <- t(crawley.inv[, 1:(length(crawley.inv) - 2)])
S.obs <- function(x) {
rowSums(x > 0) * 1
}
richness.nat <- S.obs(crawley.nat.sbys[-c(1:3), ])   # Remove first three rows because they're not sites
mean(richness.nat, na.rm = T)
S.obs(crawley.inv.sbys)
S.obs(crawley.inv.sbys[-c(1:3), ])
crawley.inv.sbys
View(crawley.inv.sbys[-c(1:3), ])
S.obs(crawley.inv.sbys[-c(1:3), ], na.rm = T)
S.obs <- function(x, na.rm = T) {
rowSums(x > 0) * 1
}
richness.nat <- S.obs(crawley.nat.sbys[-c(1:3), ])   # Remove first three rows because they're not sites
mean(richness.nat, na.rm = T)
S.obs(crawley.inv.sbys[-c(1:3), ])
S.obs(crawley.inv.sbys[-c(1:3, 271:277), ])
View(crawley.inv.sbys[-c(1:3, 271:277), ])
crawley.inv.sbys %>% slice(1:(n()-7))
crawley.inv.sbys %>% as.df %>%slice(1:(n()-7))
crawley.inv.sbys %>% as.data.frame() %>%slice(1:(n()-7))
crawley.inv.sbys %>% as.data.frame() %>%slice(1:(n()-9))
crawley.inv[, 1:(length(crawley.inv) - 2)]
View(crawley.inv[, 1:(length(crawley.inv) - 2)])
crawley.full
View(crawley.full)
# Chunk 1
rm(list = ls())
getwd()
setwd("~/GitHub/QB19_IndependentProject/")
require("vegan")
require("dplyr")
require("magrittr")
crawley.full <- read.csv("Crawley.csv")
View(crawley.full)    # This is a nifty thing that dplyr does
crawley.full %>%
group_by(Nativity.Code) %>%
summarize(grpcount = n())
crawley.full <- crawley.full[-c(293:300), ]
crawley.full %<>%     # This double pipe saves all the stuff I did back into the original df
mutate(Nativity.new = ifelse(Nativity.Code == "0" | Nativity.Code == "1", "0", "1")) %>%
filter(Nativity.Code != "UNK")
crawley.nat <- crawley.full[crawley.full$Nativity.new == "0", ]
View(crawley.nat)
crawley.inv <- crawley.full[crawley.full$Nativity.new == "1", ]
crawley.nat.sbys <- t(crawley.nat[, 1:(length(crawley.nat) - 2)])
crawley.inv.sbys <- t(crawley.inv[, 1:(length(crawley.inv) - 2)])
S.obs <- function(x) {
rowSums(x > 0) * 1
}
View(crawley.nat.sbys)
richness.nat <- S.obs(crawley.nat.sbys[-c(1:3), ])   # Remove first three rows because they're not sites
mean(richness.nat, na.rm = T)
richness.nat
S.obs(crawley.inv.sbys[-c(1:3), ])
richness.inv <- S.obs(crawley.inv.sbys[-c(1:3), ])
mean(richness.inv, na.rm = T)
sem <- function (x) {
sd(na.omit(x)) / sqrt(length(na.omit(x)))
}
sem.nat <- sem(richness.nat)
sem.inv <- sem(richness.inv)
mean.richness.nat <- mean(richness.nat, na.rm = T)
mean.richness.inv <- mean(richness.inv, na.rm = T)
nat.coeffs <- c(mean = mean.richness.nat, sem = sem.nat)
inv.coeffs <- c(mean = mean.richness.inv, sem = sem.inv)
coeffs.df <- rbind(nat.coeffs, inv.coeffs)
coeffs.df
ggplot(coeffs.df, aes(y = mean)) +
geom_bar(position = position_dodge(), stat = "identity")
require("ggplot")
require("ggplot2")
ggplot(coeffs.df, aes(y = mean)) +
geom_bar(position = position_dodge(), stat = "identity")
class(coeffs.df)
coeffs.df <- as.dataframe(rbind(nat.coeffs, inv.coeffs))
coeffs.df %<>% as.data.frame()
class(coeffs.df)
ggplot(coeffs.df, aes(y = mean)) +
geom_bar(position = position_dodge(), stat = "identity")
nat.coeffs <- c(code = "native", mean = mean.richness.nat, sem = sem.nat)
nat.coeffs
inv.coeffs <- c(code = "invasive", mean = mean.richness.inv, sem = sem.inv)
coeffs.df <- rbind(nat.coeffs, inv.coeffs)
coeffs.df %<>% as.data.frame()  # Make a dataframe
ggplot(coeffs.df, aes(y = mean, x )) +
geom_bar(position = position_dodge(), stat = "identity")
ggplot(coeffs.df, aes(y = mean, x = code)) +
geom_bar(position = position_dodge(), stat = "identity")
ggplot(coeffs.df, aes(y = mean, x = code)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin = mean - sem,
ymax = mean + sem),
width = 0.2,
position = position_dodge(0.9)) +
xlab("Invasive status") +
ylab("Mean Observed Richness")
class(coeffs.df$sem)
sem.nat <- sem(richness.nat) %>% as.numeric()
class(coeffs.df$sem)
nat.coeffs <- c(code = "native", mean = mean.richness.nat, sem = sem.nat)
coeffs.df <- rbind(nat.coeffs, inv.coeffs)
class(coeffs.df$sem)
sem.nat <- sem(richness.nat) %>% as.numeric()
sem.inv <- sem(richness.inv) %>% as.numeric()
nat.coeffs <- c(code = "native", mean = mean.richness.nat, sem = sem.nat)
inv.coeffs <- c(code = "invasive", mean = mean.richness.inv, sem = sem.inv)
coeffs.df <- rbind(nat.coeffs, inv.coeffs)
coeffs.df %<>% as.data.frame()  # Make a dataframe
ggplot(coeffs.df, aes(y = mean, x = code)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin = mean - sem,
ymax = mean + sem),
width = 0.2,
position = position_dodge(0.9)) +
xlab("Invasive status") +
ylab("Mean Observed Richness")
class(coeffs.df$sem)
class(sem.nat)
class(nat.coeffs$sem)
class(nat.coeffs)
nat.coeffs
nat.coeffs <- as.vector(c(code = "native", mean = mean.richness.nat, sem = sem.nat))
nat.coeffs
class(nat.coeffs)
sem.nat
nat.coeffs <- as.list(c(code = "native", mean = mean.richness.nat, sem = sem.nat))
nat.coeffs
nat.coeffs <- as.data.frame(c(code = "native", mean = mean.richness.nat, sem = sem.nat))
nat.coeffs
nat.coeffs <- c("native", mean.richness.nat, sem.nat)
nat.coeffs
sems <- c(sem.nat, sem.inv)
sems
means <- c(mean.richness.nat, mean.richness.inv)
means
codes <- c("native", "invasive")
rbind(codes, means, sems)
rbind(means, sems)
cbind(means, sems)
cbind(code = c("Native", "Invastive"))
coeffs <- cbind(means, sems)
coeffs <- cbind(coeffs, code = c("Native", "Invastive"))
coeffs
class(coeffs)
coeffs <- df(cbind(coeffs, code = c("Native", "Invastive")))
coeffs <- df(cbind(means, sems))
data.frame(cbind(means, sems))
data.frame("code" = c("Native", "Invastive"),
"means" = c(means),
"sems" = c(sems))
coeffs <- data.frame("code" = c("Native", "Invastive"),
"mean" = c(means),
"sem" = c(sems))
ggplot(coeffs.df, aes(y = mean, x = code)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin = mean - sem,
ymax = mean + sem),
width = 0.2,
position = position_dodge(0.9)) +
xlab("Invasive status") +
ylab("Mean Observed Richness")
coeffs
ggplot(coeffs, aes(y = mean, x = code)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin = mean - sem,
ymax = mean + sem),
width = 0.2,
position = position_dodge(0.9)) +
xlab("Invasive status") +
ylab("Mean Observed Richness")
ggplot(coeffs, aes(y = mean, x = code)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(aes(ymin = mean - sem,
ymax = mean + sem),
width = 0.2,
position = position_dodge(0.9)) +
xlab("Invasive status") +
ylab("Mean Observed Richness") +
theme_bw()
# Chunk 1
rm(list = ls())
getwd()
setwd("~/GitHub/QB19_IndependentProject/")
require("vegan")
require("dplyr")
require("magrittr")
require("ggplot2")
crawley.full <- read.csv("Crawley.csv")
View(crawley.full)    # This is a nifty thing that dplyr does
crawley.full %>%
group_by(Nativity.Code) %>%
summarize(grpcount = n())
crawley.full <- crawley.full[-c(293:300), ]
crawley.full <- read.csv("Crawley.csv")
crawley.full <- crawley.full[-c(293:300), ]
crawley.full %<>%     # This double pipe saves all the stuff I did back into the original df
mutate(Nativity.new = ifelse(Nativity.Code == "0" | Nativity.Code == "1", "0", "1")) %>%
filter(Nativity.Code != "UNK")
crawley.full %<>%     # This double pipe saves all the stuff I did back into the original df
mutate(Nativity.new = ifelse(Nativity.Code == "0", "0", "1")) %>%
filter(Nativity.Code != "UNK")
crawley.full <- read.csv("Crawley.csv")
colnames(crawley.full)
crawley.full <- crawley.full[-c(293:300), -c(24, 25)]
crawley.full %<>%     # This double pipe saves all the stuff I did back into the original df
mutate(Nativity.new = ifelse(Nativity.Code == "0", "0", "1")) %>%
filter(Nativity.Code != "UNK")
crawley.full[crawley.full$ Nativity.Code == "1", ]
crawley.inv <- crawley.full[crawley.full$ Nativity.Code == "1", ]
crawley.inv
View(crawley.inv)
crawley.inv <- crawley.full[crawley.full$ Nativity.Code == "3", ]
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/GitHub/QB19_IndependentProject/")
getwd()
